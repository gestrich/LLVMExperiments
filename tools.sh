#!/bin/bash

set -e
set -u

#####################
# BREW LLVM
#####################

brewLLVMPath="/opt/homebrew/Cellar/llvm/17.0.6"
includePath="$brewLLVMPath/include"
binPath="$brewLLVMPath/bin"

function brewLLVMInstall() {
  # Download llvm via Brew
  brew install llvm@17
  brewLLVMCopyToolchain
  
  # After installation,
  # It prints these suggestions:
  #   To use the bundled libc++ please add the following LDFLAGS:
  #     LDFLAGS="-L/opt/homebrew/opt/llvm/lib/c++ -Wl,-rpath,/opt/homebrew/opt/llvm/lib/c++"
  #   For compilers to find llvm you may need to set:
  #     export LDFLAGS="-L/opt/homebrew/opt/llvm/lib"
  #     export CPPFLAGS="-I/opt/homebrew/opt/llvm/include

  # Build C++ program, from command line, with Brew Clang
  # Update Xcode toolchain to point to that.

  # Build using Xcode with Brew Clang
}

function brewLLVMUninstall() {
  brew uninstall llvm@17
}

# Demonstrates creating a program that links against LLVM tools
function brewLLVMClangHelloWorld() {

  executableName="program"
  rm -f "$executableName"

  flags="$($binPath/llvm-config --ldflags --libs all --system-libs)"

  "${binPath}"/clang++ BrewClang/main.cpp \
    -o $executableName -std=c++17 \
    -I "$includePath" \
    $flags \
    -lclangsema \
    -lclanganalysis \
    -lclangBasic \
    -lclangAST \
    -lclangASTMatchers \
    -lclangTooling \
    -lclangrewritefrontend \
    -lclangedit \
    -lclangparse \
    -lclangfrontend \
    -lclangbasic \
    -lclangdriver \
    -lclangast \
    -lclangastmatchers \
    -lclanglex \
    -lpthread \
    -lncurses \
    -lclang-cpp

    echo "Compilation db: Creating.."
    commandsPath="$(brewLLVMCreateSampleCompilationDatabase)"
    echo "Compilation db: Done!"

    echo "Clang Tool: Running..."
    ./$executableName SampleCPlusPlusProject/sample.cpp -p "$commandsPath"
    echo "Clang Tool: Done"
}

function brewLLVMCreateSampleCompilationDatabase() {
    compilationDatabasePath="/Users/bill/dev/personal/examples/apple/AST/CompilationDatabase"
    commands_path="compile_commands.json"
    rm -rf "$compilationDatabasePath"
    rm -rf "$commands_path"
    
    # Add the -v flag if failures are found in the compilation database but not when building directly
    # You can then compare the resuling flags for differences (extra flags get added to the resulting clang-17 commands)
    # The -resource-dir flag was not needed when build C++ usually, but is to produce the right compilation commands.
    ${binPath}/clang++ -I "/opt/homebrew/opt/llvm/include" SampleCPlusPlusProject/sample.cpp -o SampleCPlusPlus.o -gen-cdb-fragment-path "$compilationDatabasePath" -resource-dir /opt/homebrew/Cellar/llvm/17.0.6/lib/clang/17
    
    local -a files=$(ls ${compilationDatabasePath}/*.json)

    for file in "$@"; do
        [[ -f "$file" ]] || continue

        # Fragments generated by clang have a comma before EOF
        # If a fragment is stil invalid after removing it, it should be skipped
        if sed -e '$s/,$//' "$file" | "$JQ" . > /dev/null; then
            files+=("$file")
        fi
    done

    if (( ${#files[@]} == 0 )); then
        echo "No input files found!" >&2
        exit 1
    fi
    
    sed -e '1s/^/[\'$'\n''/' -e '$s/,$/\'$'\n'']/' "${files[@]}" > "$commands_path"
    echo "$commands_path"
}

function brewLLVMCopyToolchain() {
  #rm -rf "/Users/bill/Library/Developer/Toolchains/
  mkdir -p /Users/bill/Library/Developer/Toolchains
  cp -r "$brewLLVMPath/Toolchains/LLVM17.0.6.xctoolchain" "/Users/bill/Library/Developer/Toolchains"
}


#####################
# Apple LLVM
#####################

apple_llvm_repo_path="/Users/bill/dev/personal/examples/apple/llvm-project"
apple_llvm_build_folder="/Users/bill/dev/personal/examples/apple/llvm-build"
function appleLLVMClone() {
  git clone --depth=1 https://github.com/apple/llvm-project.git "$apple_llvm_repo_path"
}

function appleLLVMBuild1() {
  cd "$apple_llvm_repo_path"
  rm -rf "$apple_llvm_build_folder"
  mkdir "$apple_llvm_build_folder"
  cd "$apple_llvm_build_folder"
  cmake -G "Unix Makefiles" \
    -DCMAKE_BUILD_TYPE=Debug \
    -DCMAKE_INSTALL_PREFIX=~/Library/Developer/ \
    -DLLVM_APPEND_VC_REV=on \
    -DLLVM_CREATE_XCODE_TOOLCHAIN=on \
    -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra" \
    "$apple_llvm_repo_path/llvm"
  make -j4
  #appleLLVMCreateToolChain .
}

# I was able to successfully build this
# However I would get errors when creating 
# the xcode keycahin at 95% completion:
# ld: library 'unwind_shared' not found
# I think you are not supposed to jump straight to the 2nd stage like I did here.
function appleLLVMBuild2() {
  apple_llvm_build_folder2="/Users/bill/dev/personal/examples/apple/llvm-build2"
  apple_cmake_path="$apple_llvm_repo_path/clang/cmake/caches/Apple-stage2.cmake"

  cd "$apple_llvm_repo_path"
  rm -rf "$apple_llvm_build_folder2"
  mkdir "$apple_llvm_build_folder2"
  cd "$apple_llvm_build_folder2"
  cmake -G "Unix Makefiles" \
    -C "$apple_cmake_path" \
    -DCMAKE_BUILD_TYPE=Debug \
    -DCMAKE_INSTALL_PREFIX=~/Library/Developer/ \
    -DLLVM_APPEND_VC_REV=on \
    -DLLVM_CREATE_XCODE_TOOLCHAIN=on \
    -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra" \
    "$apple_llvm_repo_path/llvm"
  make -j4
  appleLLVMCreateToolChain .
}

function appleLLVMBuild3() {
  apple_llvm_build_folder2="/Users/bill/dev/personal/examples/apple/llvm-build3"
  apple_cmake_path="$apple_llvm_repo_path/clang/cmake/caches/Apple-stage1.cmake"

  cd "$apple_llvm_repo_path"
  rm -rf "$apple_llvm_build_folder2"
  mkdir "$apple_llvm_build_folder2"
  cd "$apple_llvm_build_folder2"
  cmake -G "Unix Makefiles" \
    -C "$apple_cmake_path" \
    -DCMAKE_BUILD_TYPE=Debug \
    -DCMAKE_INSTALL_PREFIX=~/Library/Developer/ \
    -DLLVM_APPEND_VC_REV=on \
    -DLLVM_CREATE_XCODE_TOOLCHAIN=on \
    -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra" \
    "$apple_llvm_repo_path/llvm"
  make -j4
  appleLLVMCreateToolChain .
}

# Builds simple iOS apps but not those that depends on frameworks.
# You get error: File cannot be open()ed, errno=2 path=/Users/bill/Library/Developer/Toolchains/LLVM18.0.0git.xctoolchain/usr/lib/clang/18/lib/darwin/libclang_rt.profile_ios.a in '/Users/bill/Library/Developer/Toolchains/LLVM18.0.0git.xctoolchain/usr/lib/clang/18/lib/darwin/libclang_rt.profile_ios.a'
# There is no 'lib' in /Users/bill/Library/Developer/Toolchains/LLVM18.0.0git.xctoolchain/usr/lib/clang/18/lib <-
# All the .a files are in /Users/bill/Library/Developer/Toolchains/LLVM18.0.0git.xctoolchain/usr/lib
function appleLLVMBuild4() {
  apple_llvm_build_folder2="/Users/bill/dev/personal/examples/apple/llvm-build4"
  apple_cmake_path="$apple_llvm_repo_path/clang/cmake/caches/Apple-stage1.cmake"

  cd "$apple_llvm_repo_path"
  rm -rf "$apple_llvm_build_folder2"
  mkdir "$apple_llvm_build_folder2"
  cd "$apple_llvm_build_folder2"
  cmake -G "Unix Makefiles" \
    -C "$apple_cmake_path" \
    -DCMAKE_BUILD_TYPE=Debug \
    -DCMAKE_INSTALL_PREFIX=~/Library/Developer/ \
    -DLLVM_APPEND_VC_REV=on \
    -DLLVM_CREATE_XCODE_TOOLCHAIN=on \
    -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra" \
    -DLLVM_TARGETS_TO_BUILD="X86;ARM;AArch64" \
    "$apple_llvm_repo_path/llvm"
  make -j4
  appleLLVMCreateToolChain .
}

# Adding the "compiler-rt" here allowed  libclang_rt.profile_osx.a to build but I need the iOS version.
# The same error was occurring as above.
function appleLLVMBuild5() {
  apple_llvm_build_folder2="/Users/bill/dev/personal/examples/apple/llvm-build5"
  apple_cmake_path="$apple_llvm_repo_path/clang/cmake/caches/Apple-stage1.cmake"

  cd "$apple_llvm_repo_path"
  rm -rf "$apple_llvm_build_folder2"
  mkdir "$apple_llvm_build_folder2"
  cd "$apple_llvm_build_folder2"
  cmake -G "Unix Makefiles" \
    -C "$apple_cmake_path" \
    -DCMAKE_BUILD_TYPE=Debug \
    -DCMAKE_INSTALL_PREFIX=~/Library/Developer/ \
    -DLLVM_APPEND_VC_REV=on \
    -DLLVM_CREATE_XCODE_TOOLCHAIN=on \
    -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;compiler-rt" \
    -DLLVM_TARGETS_TO_BUILD="X86;ARM;AArch64" \
    "$apple_llvm_repo_path/llvm"
  make -j4
  appleLLVMCreateToolChain .
}

# Added the -DDARWIN_ios_ARCHS=AArch64 -DCOMPILER_RT_ENABLE_IOS=On
# This allowed me to build on an iOS Simulator.
# The iOS device libraries are still missing though. This was progress though.
# When building loop, this one runs into an issue:
#   ld: Undefined symbols: __swift_FORCE_LOAD_$_swiftCompatibility56, referenced from:
function appleLLVMBuild6() {
  apple_llvm_build_folder2="/Users/bill/dev/personal/examples/apple/llvm-build6"
  apple_cmake_path="$apple_llvm_repo_path/clang/cmake/caches/Apple-stage1.cmake"

  cd "$apple_llvm_repo_path"
  rm -rf "$apple_llvm_build_folder2"
  mkdir "$apple_llvm_build_folder2"
  cd "$apple_llvm_build_folder2"
  cmake -G "Unix Makefiles" \
    -C "$apple_cmake_path" \
    -DCMAKE_BUILD_TYPE=Debug \
    -DCMAKE_INSTALL_PREFIX=~/Library/Developer/ \
    -DLLVM_APPEND_VC_REV=on \
    -DLLVM_CREATE_XCODE_TOOLCHAIN=on \
    -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;compiler-rt" \
    -DLLVM_TARGETS_TO_BUILD="X86;ARM;AArch64" \
    -DDARWIN_ios_ARCHS=AArch64 -DCOMPILER_RT_ENABLE_IOS=On \
    "$apple_llvm_repo_path/llvm"
  make -j4
  appleLLVMCreateToolChain .
}

function appleLLVMBuild7() {
  apple_llvm_build_folder2="/Users/bill/dev/personal/examples/apple/llvm-build7"
  apple_cmake_path="$apple_llvm_repo_path/clang/cmake/caches/Apple-stage1.cmake"

  cd "$apple_llvm_repo_path"
  rm -rf "$apple_llvm_build_folder2"
  mkdir "$apple_llvm_build_folder2"
  cd "$apple_llvm_build_folder2"
  cmake -G "Unix Makefiles" \
    -C "$apple_cmake_path" \
    -DCMAKE_BUILD_TYPE=Debug \
    -DCMAKE_INSTALL_PREFIX=~/Library/Developer/ \
    -DLLVM_APPEND_VC_REV=on \
    -DLLVM_CREATE_XCODE_TOOLCHAIN=on \
    -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;compiler-rt" \
    -DLLVM_TARGETS_TO_BUILD="X86;ARM;AArch64" \
    -DDARWIN_ios_ARCHS=AArch64 -DCOMPILER_RT_ENABLE_IOS=On \
    "$apple_llvm_repo_path/llvm"
  make -j4
  appleLLVMCreateToolChain .
}

function appleLLVMCreateToolChain() {
  #sudo rm -rf ~/Library/Developer/Toolchains/LLVM18.0.0git.xctoolchain
  buildPath="$1"

  cd "$buildPath/tools/xcode-toolchain"
  sudo make install-xcode-toolchain
}

# Check if the function exists
  if [ $# -gt 0 ]; then 
#if declare -f "$1" > /dev/null
  # call arguments verbatim
  "$@"
else
  # Show a helpful error
  echo "Functions Available:"
  typeset -f | awk '!/^main[ (]/ && /^[^ {}]+ *\(\)/ { gsub(/[()]/, "", $1); print $1}'
  exit 1
fi
